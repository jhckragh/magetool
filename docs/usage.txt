Magetool documentation
======================

Creating modules
----------------

To create a new module called NewProduct, navigate to a namespace
directory (e.g., ~/public_html/magento/app/code/local/Company/)
and run Magetool like this:

    magetool create module NewProduct

This will create the following directory structure within the
namespace directory:

    - NewProduct/
       |- Block/
       |- controllers/
       |- etc/
       |   '- config.xml
       |- Helper/
       |- Model/
       |- sql/

In addition it will activate the module by creating an activation file
in ../../../etc/modules/. (In the example case the file will be
called Company_NewProduct.xml.)


Creating controllers
--------------------

To create an IndexController in a module, navigate to the module's
directory (e.g., ~/public_html/magento/app/code/local/Company/NewProduct/)
and run Magetool like this:

    magetool create controller index

This will do two things:

1. It will define a skeleton PHP class in controllers/IndexController.php:

        <?php
        class class Company_NewProduct_IndexController
            extends Mage_Core_Controller_Front_Action
        {
        
        }

2. It will update the module's configuration file, etc/config.xml,
   to tell Magento that the module now has one or more controllers to
   dispatch to:

        ...
        <frontend>
          ...
          <routers>
            <newproduct>
              <use>standard</use>
                <args>
                  <module>Company_NewProduct</module>
                  <frontName>newproduct</frontName>
                </args>
            </newproduct>
          </routers>
          ...
        </frontend>
        ...


Creating blocks, helpers, and models
------------------------------------

To create a block called ProductViewCase in a module, navigate to the
module's directory and run Magetool like this:

    magetool create block ProductViewCase

(To create a helper or a model with the same name, replace block with
either helper or model, respectively.)
      
This will Do The Right Thing. In the case of blocks and helpers, it
will define a skeleton PHP class in Block/ProductViewCase.php or
Helper/ProductViewCase.php. In addition, it will update the module's
configuration file to tell Magento that the module has one or more
Block/Helper classes, e.g.:

    ...
    <global>
      ...
      <blocks>
        <newproduct>
          <class>Company_NewProduct_Block</class>
        </newproduct>
      </blocks>
      ...
    </global>
    ...

In the case of models the above invocation will define a PHP clas in
Model/ProductViewCase.php. Also, it will create a resource model at
Model/Mysql4/ProductViewCase.php and update the module's configuration
file accordingly.


Note on creating models
-----------------------

The syntax for creating models is the same as that for creating blocks
and helpers. However, as creating and registering a model is more
complex than creating and registering a block or a helper, the model
command supports two options for customizing how it is done:

 * -t or --table: This option allows you to specify which table the
                      model's entity corresponds to.

 * -i or --id-field-name: This option allows you to specify which
                              column in the table uniquely identifies
			      rows in the table.

Note that these are *options*: you don't have to use them. Magetool
provides sane defaults for both options.


Creating layout files
---------------------

To create a layout file called newproduct.xml in
app/design/frontend/default/default/, run Magetool like this from a
module directory (not from within app/design/frontend/default/default/):

    magetool create layout newproduct


Registering files
-----------------

Sometimes you might be working on a module where classes or layout
files have been defined manually but where the module's configuration
file has not been updated accordingly. To register the presence of
these kinds of files in the configuration file, use the register
action, e.g.:

    magetool register block

This will update the configuration file the same way magetool create
block does but will not actually create any new files.


Specifying superclasses
-----------------------

Normally when you use the create action, Magetool defines the created
PHP class so that it extends a generic superclass. Running

    magetool create helper Data

for instance, defines a PHP class in Helper/Data.php which extends
Mage_Core_Helper_Abstract.

To manually specify which superclass a PHP class should extend, use
the -s or --superclass option:

    magetool -s Mage_Catalog_Helper_Image create helper Data

This will define a PHP class in Helper/Data.php which extends
Mage_Catalog_Helper_Image.


Overriding classes
------------------

To tell Magento that a created class should override its superclass, use
the -o or --override option.

To illustrate, the following invocation will define a block in
Block/Over.php which extends and overrides the class
Mage_Catalog_Block_Product_View_Type_Simple:

    magetool -os Mage_Catalog_Block_Product_View_Type_Simple create block Over


Legal
-----

Magento is a trademark of Irubin Consulting Inc. Magetool is not in
any way affiliated with or endorsed by this trademark owner.
